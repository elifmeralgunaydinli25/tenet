datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  token     String
  personas  Persona[]
}

model Persona {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  name             String            @unique
  screenName       String
  iconUrl          String
  followingBoards  Board[]           @relation("FollowingBoards", references: [id])
  modelatingBoards Board[]           @relation(references: [id])
  followingUsers   PersonaRelation[] @relation("destPersona")
  followedUsers    PersonaRelation[] @relation("srcPersona")
  votesOnComments  VoteOnComment[]
  votesOnPosts     VoteOnPost[]
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  posts            Post[]
  threads          Thread[]
  replies          Reply[]
}

model PersonaRelation {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  srcPersonaId  Int
  srcPersona    Persona  @relation("srcPersona", fields: [srcPersonaId], references: [id])
  destPersonaId Int
  destPersona   Persona  @relation("destPersona", fields: [destPersonaId], references: [id])
}

model VoteOnPost {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   Persona  @relation(fields: [createdById], references: [id])
  weight      Int
}

model VoteOnComment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  createdById Int
  createdBy   Persona  @relation(fields: [createdById], references: [id])
  weight      Int
}

model Board {
  id          Int       @id @default(autoincrement())
  title       String
  createdAt   DateTime  @default(now())
  description String
  moderators  Persona[] @relation(references: [id])
  followedBy  Persona[] @relation("FollowingBoards", references: [id])
  posts       Post[]
  threads     Thread[]
}

model Post {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  title       String
  contentType ContentType
  content     String // wip
  threads     Thread[]
  board       Board       @relation(fields: [boardId], references: [id])
  boardId     Int
  persona     Persona     @relation(fields: [personaId], references: [id])
  personaId   Int
}

model Thread {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  content     String
  contentType ContentType
  replies     Reply[]
  board       Board       @relation(fields: [boardId], references: [id])
  boardId     Int
  postId      Int
  Post        Post        @relation(fields: [postId], references: [id])
  persona     Persona     @relation(fields: [personaId], references: [id])
  personaId   Int
}

model Reply {
  id          Int         @id @default(autoincrement())
  contentType ContentType
  content     String
  createdAt   DateTime    @default(now())
  thread      Thread      @relation(fields: [threadId], references: [id])
  threadId    Int
  persona     Persona     @relation(fields: [personaId], references: [id])
  personaId   Int
}

enum ContentType {
  TEXT
  LINK
  IMAGE
  VIDEO
  EMOJI
}
